#include "soda.h"
#include "Printer.cc"
#include "mprng.h"

#define SodaCost                   1    //# Manufacturer Suggested Retail Price (MSRP) per bottle
#define NumStudents                4   // # number of students to create
#define MaxPurchases              10    //# maximum number of bottles a student purchases
#define NumVendingMachines         3    //# number of vending machines
#define MaxStockPerFlavour         5   // # maximum number of bottles of each flavour in a vending machine
#define MaxShippedPerFlavour       6   // # maximum number of bottles of each flavour generated by the bottling
                                //#    plant per production run
#define TimeBetweenShipments       5   // # length of time between shipment pickup
#define ParentalDelay             20   // # length of time between new deposits of funds
#define NumCouriers                3    //# maximum number of couriers in the pool

unsigned int seed;

void uMain::main() {

	unsigned int numStudents=2, numVendingMachines=2, numCouriers=1;
	seed = 3;

	MPRNG mprng(seed);

	Printer prt(numStudents,numVendingMachines,numCouriers);

	//Bank bank(numStudents);

	//Parent parent(prt, bank, numStudents, parentalDelay );

	//WATCardOffice cardOffice(prt, bank, numCouriers ); //the couriers are created by the WATCard ofÔ¨Åce.

	//NameServer nameServer(prt, numVendingMachines, numStudents );

	//VendingMachine *vendingMachine[numVendingMachines];
	//for (int i = 0; i < numVendingMachines; i++)
	//	vendingMachine[i] = new VendingMachine(prt, nameServer, i, sodaCost, maxStockPerFlavour );

	//BottlingPlant *bottlingPlant = new BottlingPlant(prt, nameServer, numVendingMachines,maxShippedPerFlavour,
	//		maxStockPerFlavour, timeBetweenShipments ); //truck is created by the bottling plant

	//Student *student[numStudents];
	//for (int i = 0; i < numStudents; i++)
	//	student[i] = new Student(prt, nameServer, cardOffice, i, maxPurchases );

	//for (int i = 0; i < numStudents; i++)
	//	delete(student[i]);

	//delete(bottlingPlant);

	//for (int i = 0; i < numVendingMachines; i++)
	//	delete(vendingMachine[i]);


}
